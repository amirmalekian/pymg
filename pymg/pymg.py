"""
██████╗ ██╗   ██╗ ███╗   ███╗  ██████╗
██╔══██╗╚██╗ ██╔╝ ████╗ ████║ ██╔════╝
██████╔╝ ╚████╔╝  ██╔████╔██║ ██║  ███╗
██╔═══╝   ╚██╔╝   ██║╚██╔╝██║ ██║   ██║
██║        ██║    ██║ ╚═╝ ██║ ╚██████╔╝
╚═╝        ╚═╝    ╚═╝     ╚═╝  ╚═════╝


pymg is a CLI tool that can interpret Python files and display errors in a more readable form.

This tool interprets the selected Python file using the Python interpreter
that is already installed on the system, and in case of errors, it displays
the errors in separate, diverse and more readable forms.

pymg Github repository: https://github.com/mimseyedi/pymg
"""


import sys
import click
import pickle
import subprocess
from pathlib import Path
from typing import Callable
from types import TracebackType
from rich.panel import Panel
from rich.console import Group
from rich.syntax import Syntax
from rich import print as cprint


def read_source(source_file: Path) -> list[str]:
    with open(file=source_file, mode='r') as source_file_:
        source: list = source_file_.readlines()

    return source


def mk_mirror_file(mirror_file: Path, source: list[str], header: list[str]) -> None:

    mirror_text: list = [*header, *source]

    with open(file=mirror_file, mode='w+') as mirror_file_:
        mirror_file_.write(''.join(mirror_text))


def write_recipe(recipe_file: Path, recipe_data: list[Callable]) -> None:
    with open(file=recipe_file, mode='wb') as recipe_file_:
        pickle.dump(recipe_data, recipe_file_)


def read_recipe(recipe_file: Path) -> list[Callable]:
    with open(file=recipe_file, mode='rb') as recipe_file_:
        recipe: list = pickle.load(recipe_file_)

    return recipe


def check_syntax(source_file: Path, python_interpreter: str) -> tuple[bool, str]:
    syntax_err: str = subprocess.run(
        [python_interpreter, '-m', 'py_compile', source_file.__str__()],
        capture_output=True
    ).stderr.decode()

    return (True, 'INTACT') if not syntax_err else (False, syntax_err)


def display_syntax_error(syntax_err: str) -> None:
    splitted_message: list = syntax_err[syntax_err.index(',') + 2:].split('\n')

    lineno: int = int(splitted_message[0].split()[-1])

    main_group = Group(
        Syntax(splitted_message[1].strip(), lexer='python', line_numbers=True,
               start_line=lineno, highlight_lines={lineno},
               indent_guides=True, background_color='default', theme='gruvbox-dark'),

        splitted_message[2] if len(str(lineno)) < 2 else " " * (len(str(lineno)) - 1) + splitted_message[2],

        '\n' + f'Message: [default]{splitted_message[3][13:].capitalize()}[/]'
    )

    cprint(Panel(main_group, title='SyntaxError', style='red', padding=(1, 1, 1, 1), highlight=False))


def gen_type(**exc_info) -> list:
    return [
        f"[yellow]Exception Type ❱[/] [bold default]{exc_info['exc_type'].__name__}[/]"
    ]


def gen_message(**exc_info) -> list:
    pass


def gen_file(**exc_info) -> list:
    pass


def gen_scope(**exc_info) -> list:
    pass


def gen_line(**exc_info) -> list:
    pass


def gen_code(**exc_info) -> list:
    pass


def gen_trace(**exc_info) -> list:
    pass


def gen_inner(**exc_info) -> list:
    pass


def gen_locals(**exc_info) -> list:
    pass


def gen_search(**exc_info) -> list:
    pass


def get_output(output_file: Path, stdout: str) -> None:
    pass


def interpret(python_interpreter: str, mirror_file: Path, args: list):
    pass


def display_error_message(exc_type: type, exc_message: Exception, traceback_: TracebackType) -> None:
    recipe: list = read_recipe(recipe_file=Path('recipe.pymgrcp'))

    template: list = [
        list_() for func in recipe
        for list_ in func(
            exc_type=exc_type,
            exc_message=exc_message,
            traceback_=traceback_
        )
    ]

    cprint(Panel(Group(*template), title='Exception', style='red', padding=(0, 1, 0, 1), highlight=False))


def prioritizing_options(options: dict) -> list[str]:
    pass


def gen_mirror_header() -> list[str]:
    header: list = [
        'from sys import excepthook\n',
        'from pymg import display_error_message\n',
        'excepthook = display_error_message\n'
    ]

    return header


def get_version() -> str:
    pass


@click.command(context_settings={'help_option_names': ['-h', '--help']})
@click.argument('python_file', required=False, nargs=-1)
@click.option('-x', '--syntax', is_flag=True, help="The health of the file will be evaluated in terms of Python syntax rules. If there are no problems, the statement INTACT will be displayed, otherwise the syntax problem will be tracked and then displayed.")
@click.option('-t', '--type', is_flag=True, help="The type of exception that occurred will be displayed. In all options (exc: -L, -C, -F), exception type and message are displayed. However, this option can be used to display the exception type alone.")
@click.option('-m', '--message', is_flag=True, help="The exception message generated by the interpreter will be displayed. Just like the --type option, this option is used to display the exception message only. Otherwise, the exception message will be displayed anyway (exc: in -L, -C, -F options).")
@click.option('-f', '--file', is_flag=True, help="The full path of the python file that was interpreted and has an error will be displayed. This option, like the --line option, has conditions to be combined.")
@click.option('-s', '--scope', is_flag=True, help="")
@click.option('-l', '--line', is_flag=True, help="The line number that caused the exception will be displayed. This option can be combined with all options except --syntax, --trace, --inner and --search.")
@click.option('-c', '--code', is_flag=True, help="The code that caused the exception will be displayed. This option, like the --line option, has conditions to be combined.")
@click.option('-T', '--trace', is_flag=True, help="All paths that contributed to the creation of the exception will be tracked, and then, with separation, each created stack will be displayed.")
@click.option('-i', '--inner', is_flag=True, help="Like the --trace option, the entire path that contributed to the exception will be traced, with the difference that only the internal stacks related to the interpreted file will be displayed.")
@click.option('-L', '--locals', is_flag=True, help="")
@click.option('-S', '--search', is_flag=True, help="According to the exception that occurred and the generated message, with the help of stackoverflow's free api, the search to find a solution will be started. and finally the result will be displayed in the form of links that refer to stackoverflow and users solutions.")
@click.option('-o', '--output', is_flag=True, help="")
@click.option('-r', '--recent', is_flag=True, help="")
@click.option('-v', '--version', is_flag=True, help='pymg version will be displayed. For more information and access to the latest changes, visit the pymg GitHub repository at https://github.com/mimseyedi/pymg.')
def main(**kwargs):
    """
    pymg is a CLI tool that can interpret Python files and display errors in a more readable form.\n
    This tool interprets the selected Python file using the Python interpreter that is already installed on the system, and in case of errors, it displays the errors in separate, diverse and more readable forms.\n
    more information: https://github.com/mimseyedi/pymg
    """

    pass


if __name__ == '__main__':
    main()
