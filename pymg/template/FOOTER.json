{
  "static": ["\nexcept BaseException as ex:\n",
             "    ex_type, ex_value, ex_traceback = sys.exc_info()\n",
             "    trace_back = traceback.extract_tb(ex_traceback)\n",
             "    stack_trace = list()\n",
             "    print()\n",
             "    for trace in trace_back:\n",
             "        if trace[0].endswith('out.py'):\n",
             "            stack_trace.append(f'File: {FILE}')\n",
             "        else:\n",
             "            stack_trace.append(f'File: {trace[0]}')\n",
             "        stack_trace.append(f'Line: {int(trace[1]) - 4}')\n",
             "        stack_trace.append(f'Code: {trace[3]}')\n",
             "        mark = '\\033[31m^\\033[0m' * len(trace[3])\n",
             "        stack_trace.append(f'      {mark}')\n",
             "    print(f'Exception type: {ex_type.__name__}')\n",
             "    print(f'Exception message: {ex_value}')\n"],

  "modes": {"standard": "    print('\\n'.join(stack_trace[1:4]))\n",
            "type": "    print(f'Exception type: {ex_type.__name__}')\n",
            "message": "    print(f'Exception message: {ex_value}')\n",
            "line": "    print(f'Line: {int(trace_back[0][1]) - 4}')\n",
            "code": "    print(f'Code: {trace_back[0][3]}')\n",
            "file": "    print(f'File: {FILE}')\n",
            "trace": ["    start, end, i, counter = 0, 4, 0, 1\n",
                      "    while i <= len(stack_trace):\n",
                      "        print()\n",
                      "        print(f'Stack number -> {counter}')\n",
                      "        for j in stack_trace[start:end]:\n",
                      "            print(j)\n",
                      "        start += end\n",
                      "        end += end\n",
                      "        i += end\n",
                      "        counter += 1\n"]}
}